

git 修改账号密码后, pull, clone, push 提示Authentication failed for
执行以下命令: 
1. git config –-global –-unset credential.helper
2. 如果用了第一个命令 还不能解决问题那么 用这个命令： 
git config –-global http.emptyAuth true
3. windows控制面板, 控制面板\用户帐户\凭据管理器, 删除git项目相关的凭证, 重新输入账号密码

/**
 * 工作区和缓存区
 */
工作区: 电脑里能直观看到的文件夹
缓存区: 调用git add 命令后, 文件的改动信息被记录到git的缓存区, 


/**
 * git常用配置命令
 */
git config --global user.name                              :  配置用户名
git config --global user.email                             :  配置用户邮箱
git config --list                                          :  查看已设配置
git config --global credential.helper store                :  避免每次提交都输入用户名密码


/**
 * git常用命令:
 */


git cherry-pick COMMIT_ID : 提交某个commit, 到当前分支下;

// 忽略文件权限的配置，具体如下
git config core.filemode false  // 当前版本库
git config --global core.fileMode false // 所有版本库

git init : 初始化一个本地的代码仓库,然后git可以对该目录下的文件进行版本跟踪, 初始化后, git默认创建一个本地的master分支
git add : 将修改的文件 , 实际上就是把文件修改添加到暂存区；
git add . : 一次性添加所有的文件, 

git commit -m '' : 将本次修改的文件提交到本地版本控制系统中(实际上就是把暂存区的所有内容提交到当前分支。) , -m 
                  面为本次修改的简短注释

git checkout --filename.php : 把filename.php文件在工作区的修改全部撤销掉, 两种情况:
                              一种是filename.php自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
                              一种是filename.php已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

git reset HEAD filename :  将暂存区中的修改,撤销掉, 重新放回工作区, 
git reflog branchname               : 拉出分支所有提交日志
git config --global alias.st status  :    配置status命令的简写形式


/**
* git切换源
*/
git remote rm origin           // 删除远程分支
git remote add origin git@github.com:xxxxx/learngit.git             // 添加新的远程分支
git push -u origin master     // 把当前分支推送到新的远程分支上


/**
 * 本地仓库关联远程仓库
 */
[
    ssh-keygen  -t  rsa  -C  "绑定git的邮箱地址"            :  首先在本地生成ssh密钥
    (打开本地磁盘路径 C:\Users\未定义\.ssh\id_rsa.pub文件, 复制秘钥到github.com的SSH keys 中)
]
git remote add origin git@github.com:git用户名/项目名称.git :　本地仓库与远程仓库相关联
ssh git@github.com                                          :  查看是否连接上
git clone git@github.com:Layery/class.git                   :  克隆远程项目到本地
git pull origin 分支名称                                    :  将远程项目的一个分支拉到本地. 
git push origin 分支名称                                    :  将本地项目的一个分支推送到远程项目分支上.
git branch —set-upstream branchname origin/branchname       :　绑定本地分支和远程分支的关联


/**
 * 分支管理：
 */
git branch -a                                               : 查看所有分支, 包括本地/远程
git branch branchname                                       : 创建分支　
git checkout -b test                                        : 创建test分支, 并将当前分支切换到test分支上, 
git branch                                                  : 命令会列出所有分支，当前分支前面会标一个*号。
git checkout branchname                                     : 切换当前分支到branchname分支
git merge branchname                                        : 当前在master分支上时 , 调用该命令, 合并branchname分支, 
git stash 　　　　　                                        : 将分支临时改动寄存下来，并不真正提交（可以进行 checkout其他分支或者拉代码）
git stash pop                                               : 将分支临时改动寄存下来内容恢复出来
git checkout -b branchname origin/branchname                : 从远程的branchname分支上拉一个分支到本地, 
git branch -d branchname                                    : 删除分支, -D(大写)代表强制删除
git push --delete origin branchname                         : 删除远程分支

/**
 * 遇见的问题 
 */
第一次向上推送时, git一直报错提示:fatal: remote origin already exists , 无法调用 git remote add 命令向上提交 , 
解决:
    
    git remote rm origin  //删除线上origin分支
    git remote add origin git....      // 再次调用该命令不再报错

push之前,先把线上代码拉一下,确保不报错
    git pull origin branchname
    git push origin branchname





/**
 * 从远程master切一个分支到本地
 */
###################################################################################################################
1: git checkout -b branchnameB origin/branchnameA  // 从远程branchnameA分支切一个分支到本地取名branchnameB

2: git checkout master               // 切换到本地master分支
   git fetch                         // 更新本地分支(不指定分支名称,默认fetch的是线上的master)
   git pull origin master            // 将线上master分支拉到本地master分支
   git checkout -b localbranch       // 从本地master分支切一个分支到本地localbranch分支

以上这两种方法效果一样吗? 有啥不同?

###################################################################################################################


